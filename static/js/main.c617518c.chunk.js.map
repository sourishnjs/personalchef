{"version":3,"sources":["recipe.module.css","Recipe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","props","className","style","recipe","title","images","src","image","alt","ingredients","map","x","text","href","url","Math","round","calories","App","useState","setRecipe","search","setSearch","phrase","setPhrase","useEffect","getRecipee","a","Axios","get","response","console","log","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","label","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sJACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,OAAS,yB,yKCoB5CC,EAlBA,SAACC,GACd,OACE,yBAAKC,UAAWC,IAAMC,QACpB,4BAAKH,EAAMI,OACX,yBAAKH,UAAWC,IAAMG,OAAQC,IAAKN,EAAMO,MAAOC,IAAI,aAEpD,4BACE,0CACCR,EAAMS,YAAYC,KAAI,SAACC,GACtB,OAAO,4BAAKA,EAAEC,UAGlB,uBAAGC,KAAMb,EAAMc,KAAf,mCACA,wCAAcC,KAAKC,MAAMhB,EAAMiB,aCoDtBC,G,MA/DH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACThB,EADS,KACDiB,EADC,OAEYD,mBAAS,IAFrB,mBAETE,EAFS,KAEDC,EAFC,OAGYH,mBAAS,QAHrB,mBAGTI,EAHS,KAGDC,EAHC,KAShBC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,4BAAAC,EAAA,sEACMC,IAAMC,IAAN,0CACcN,EADd,mBATV,WASU,oBAPT,mCAOS,sDADN,OACXO,EADW,OAIjBC,QAAQC,IAAIF,EAASG,KAAKC,MAC1Bd,EAAUU,EAASG,KAAKC,MALP,2CAAH,qDAmBhB,OACE,yBAAKjC,UAAU,OACb,0BAAMkC,SARS,SAACC,GAClBA,EAAEC,iBACFb,EAAUH,GACVC,EAAU,KAKoBrB,UAAU,eACpC,2BACEqC,KAAK,OACLC,MAAOlB,EACPmB,SAjBa,SAACJ,GACpBd,EAAUc,EAAEK,OAAOF,OACnBR,QAAQC,IAAR,iBAAsBX,KAgBhBpB,UAAU,eAEZ,4BAAQqC,KAAK,SAASrC,UAAU,iBAAhC,WAIF,yBAAKA,UAAU,WACZE,EAAOO,KAAI,SAACC,GACX,OACE,kBAAC,EAAD,CACEP,MAAOO,EAAER,OAAOuC,MAChBnC,MAAOI,EAAER,OAAOI,MAChBU,SAAUN,EAAER,OAAOc,SACnBH,IAAKH,EAAER,OAAOW,IACdL,YAAaE,EAAER,OAAOM,YACtBkC,IAAKhC,EAAEM,kBC/CD2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9B,QAAQ8B,MAAMA,EAAMC,c","file":"static/js/main.c617518c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__3l9WV\",\"images\":\"recipe_images__3UXym\"};","import React from \"react\";\r\nimport style from \"./recipe.module.css\";\r\n\r\nconst Recipe = (props) => {\r\n  return (\r\n    <div className={style.recipe}>\r\n      <h1>{props.title}</h1>\r\n      <img className={style.images} src={props.image} alt=\"kuch bhi\" />\r\n\r\n      <ul>\r\n        <b>Ingredients</b>\r\n        {props.ingredients.map((x) => {\r\n          return <li>{x.text}</li>;\r\n        })}\r\n      </ul>\r\n      <a href={props.url}>Step by step video instructions</a>\r\n      <p>Calories: {Math.round(props.calories)}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;\r\n","import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport Recipe from \"./Recipe\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [recipe, setRecipe] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [phrase, setPhrase] = useState(\"cake\");\n\n  const API_ID = \"0df2151c\";\n\n  const API_KEY = \"69c681ba8ea838e7536d229799b19bc0\";\n\n  useEffect(() => {\n    getRecipee();\n  }, [phrase]);\n\n  const getRecipee = async () => {\n    const response = await Axios.get(\n      `https://api.edamam.com/search?q=${phrase}&app_id=${API_ID}&app_key=${API_KEY}&from=0&to=3&calories=591-722&health=alcohol-free`\n    );\n    console.log(response.data.hits);\n    setRecipe(response.data.hits);\n  };\n\n  const searchRecipe = (e) => {\n    setSearch(e.target.value);\n    console.log(`search ${search}`);\n  };\n\n  const takePhrase = (e) => {\n    e.preventDefault();\n    setPhrase(search);\n    setSearch(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={takePhrase} className=\"search-form\">\n        <input\n          type=\"text\"\n          value={search}\n          onChange={searchRecipe}\n          className=\"search-bar\"\n        ></input>\n        <button type=\"submit\" className=\"search-button\">\n          Search\n        </button>\n      </form>\n      <div className=\"recipes\">\n        {recipe.map((x) => {\n          return (\n            <Recipe\n              title={x.recipe.label}\n              image={x.recipe.image}\n              calories={x.recipe.calories}\n              url={x.recipe.url}\n              ingredients={x.recipe.ingredients}\n              key={x.calories}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}